version: '3.8'
services:

  postgres:
    image: postgres:15.5
    container_name: postgres
    hostname: postgres
    depends_on:
      - grafana-agent
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
    ports:
      - '5432:5432'
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isReady -U postgres"]
#      interval: 5s
#      timeout: 5s
#      retries: 5
    volumes:
#      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/create_tables.sql
    restart: always
    networks:
      - ${GLOBAL_NETWORK:-default}

  keycloak:
    image: quay.io/keycloak/keycloak:${KEYCLOAK_VERSION:-latest}
    container_name: keycloak
    hostname: keycloak
    command: start-dev --import-realm --metrics-enabled=true
    ports:
      - "9091:9091"
      - "8080:8080"
    environment:
      - KEYCLOAK_LOGLEVEL=DEBUG
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - DB_VENDOR=POSTGRES
      #      - DB_ADDR=host.docker.internal
      - DB_DATABASE=root
      - DB_USER=root
      - DB_PASSWORD=root
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/root
      - KC_DB_SCHEMA=keycloak
      - KC_DB_USERNAME=root
      - KC_DB_PASSWORD=root
    volumes:
      - ./keycloak:/opt/keycloak/data/import
    networks:
      - ${GLOBAL_NETWORK:-default}
    depends_on:
#      - postgres
      - grafana-agent
    links:
      - postgres
    restart: on-failure
#
  grafana:
    image: docker.io/grafana/grafana-oss:10.3.1
    container_name: grafana
    depends_on:
      - loki
      - prometheus
      - tempo
    ports:
      - "3000:3000"
    hostname: ${HOST_NAME:-localhost}
    environment:
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_USER=root
      - GF_DATABASE_PASSWORD=root
      - GF_DATABASE_NAME=root
      - GF_DATABASE_SCHEMA=grafana
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_SECURITY_ADMIN_USER=user
      - GF_SECURITY_ADMIN_PASSWORD=password
    volumes:
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - grafana-data:/var/lib/grafana
#    restart: unless-stopped
    restart: on-failure
    links:
      - postgres
    networks:
      - ${GLOBAL_NETWORK:-default}
#
#  pgadmin:
#    image: dpage/pgadmin4
#    environment:
#      PGADMIN_DEFAULT_EMAIL: "pgadmin@b2mash.io"
#      PGADMIN_DEFAULT_PASSWORD: "pgadmin"
#    ports:
#      - "9999:80"
#    depends_on:
#      - postgres
#
  loki:
    image: docker.io/grafana/loki:2.9.4
    container_name: loki
    command: -config.file=/etc/config/loki.yml
    ports:
      - "3100:3100"
    hostname: ${HOST_NAME:-localhost}
    volumes:
      - ./loki/loki.yml:/etc/config/loki.yml
    restart: unless-stopped
    networks:
      - ${GLOBAL_NETWORK:-default}

  prometheus:
    image: quay.io/prometheus/prometheus:v2.49.1
    container_name: prometheus
    command:
      - "--config.file=/etc/config/prometheus.yml"
      - "--enable-feature=otlp-write-receiver"
      - "--enable-feature=exemplar-storage"
      - "--web.enable-remote-write-receiver"
    ports:
      - "9090"
    hostname: ${HOST_NAME:-localhost}
    volumes:
      - ./prometheus/prometheus.yml:/etc/config/prometheus.yml
    restart: unless-stopped
    networks:
      - ${GLOBAL_NETWORK:-default}

  tempo:
    image: docker.io/grafana/tempo:2.3.1
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110"     # Tempo
      - "4317"     # OTLP gRPC
      - "4318"     # OTLP HTTP
      - "9411"     # Zipkin
    hostname: ${HOST_NAME:-localhost}
    volumes:
      - ./tempo/tempo.yml:/etc/tempo-config.yml
    restart: unless-stopped
    networks:
      - ${GLOBAL_NETWORK:-default}

  grafana-agent:
    image: docker.io/grafana/agent:v0.39.1
    container_name: grafana-agent
    command:
      - "run"
      - "--server.http.listen-addr=0.0.0.0:12345"
      - "--storage.path=/data-agent"
      - "--disable-reporting"
      - "/etc/agent/config.river"
    depends_on:
      - loki
      - prometheus
      - tempo
    hostname: ${HOST_NAME:-localhost}
    environment:
      - AGENT_MODE=flow
      - ENVIRONMENT=dev
      - LOKI_URL=http://loki:3100/loki/api/v1/push
      - PROMETHEUS_URL=http://prometheus:9090/api/v1/write
      - TEMPO_URL=http://tempo:4317
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
    ports:
      - "12345:12345"
      - "4317:4317"
      - "4318:4318"
    volumes:
      - ./platform/agent/agent.river:/etc/agent/config.river
      - /var/run/docker.sock:/var/run/docker.sock
      - grafana-agent-data:/data-agent
    restart: unless-stopped
    networks:
      - ${GLOBAL_NETWORK:-default}

volumes:
  grafana-agent-data: { }
  grafana-data: { }
  postgres-data: { }